#ifndef _SQLITE_XH
#define _SQLITE_XH

# include <sqlite3.h>
# include <stdlib.h>
# include <stdio.h>

struct __attribute__((refId("edu:umn:cs:melt:exts:ableC:sqlite:_sqlite_db_s"))) _sqlite_db_s {
  sqlite3 *db;
};
typedef struct _sqlite_db_s *_sqlite_db;

struct __attribute__((refId("edu:umn:cs:melt:exts:ableC:sqlite:_sqlite_query_s"))) _sqlite_query_s {
  sqlite3_stmt *query;
};
typedef struct _sqlite_query_s *_sqlite_query;

_sqlite_db _new_sqlite_db(const char *filename)
{
  _sqlite_db db = malloc(sizeof(struct _sqlite_db_s));
  sqlite3_open(filename, &db->db);
  return db;
}

void db_exit(_sqlite_db db)
{
  sqlite3_close(db->db);
  free(db);
}

_sqlite_query _new_sqlite_query()
{
  _sqlite_query query = malloc(sizeof(struct _sqlite_query_s));
  return query;
}

void finalize(_sqlite_query query)
{
  int status = sqlite3_finalize(query->query);
  if (status != SQLITE_OK) {
    fprintf(stderr, "ERROR: sqlite3_finalize() returned %d\n", status);
  }
  free(query);
}

#endif

